jQuery(window).on("load", function () {
    $('#myloader').removeClass('none');
    setTimeout(hideLoader, 500);
    $('#main-wrapper').addClass('show');
    $('body').attr('data-sidebar-style') === "mini" ? $(".hamburger").addClass('is-active') : $(".hamburger").removeClass('is-active')
});
(function ($) {
    "use strict";
    $("#menu").metisMenu();

    $('.nk-nav-scroll').slimscroll({
        position: "right",
        size: "5px",
        height: "100%",
        color: "transparent"
    });

    // $(document).keydown(function (event) {
    //     if (event.shiftKey && event.keyCode === 69) {
    //         event.preventDefault();
    //         $('#main-wrapper').toggleClass("menu-toggle");
    //         $(".hamburger").toggleClass("is-active");
    //     }
    // });

    $(".nav-control").on('click', function () {
        $('#main-wrapper').toggleClass("menu-toggle");
        $(".hamburger").toggleClass("is-active");
    });

    $(function () {
        for (var nk = window.location,
            o = $("ul#menu a").filter(function () {
                return this.href == nk;
            })
                .addClass("active")
                .parent()
                .addClass("active"); ;) {
            if (!o.is("li")) break;
            o = o.parent()
                .addClass("in")
                .parent()
                .addClass("active");
        }
    });
    $(function () {
        var win_h = window.outerHeight;
        if (win_h > 0 ? win_h : screen.height) {
            $(".content-body").css("min-height", (win_h + 60) + "px");
        };
    });
    $('.selectpicker').selectpicker();
    $('[data-toggle="popover"]').popover();
    $('[data-toggle="tooltip"]').tooltip();
    const headerHight = $('.header').innerHeight();
    $(window).scroll(function () {
        if ($('body').attr('data-layout') === "horizontal" && $('body').attr('data-header-position') === "static" && $('body').attr('data-sidebar-position') === "fixed")
            $(this.window).scrollTop() >= headerHight ? $('.metismenu').addClass('fixed') : $('.metismenu').removeClass('fixed')
    });

    $('.sidebar-right-trigger').on('click', function () {
        $('.sidebar-right').toggleClass('show');
    });
})(jQuery);

var currentModalId = null;

$(document).on('shown.bs.modal', '.modal', function () {
    currentModalId = this.id;
    PasteToModal();
    for (let i = 1; i <= 500; i++) {
        PasteToModalnum(i);
    }
});

function allmx(input, count) {
    var inputValue = input.value;
    if (inputValue.length > count) {
        input.value = inputValue.slice(0, count);
    }
    var regex = /^[a-zA-Z0-9]*$/;
    if (!regex.test(inputValue)) {
        input.value = inputValue.replace(/[^a-zA-Z0-9]/g, '');
    }
}

function DisplayVehicleNum(travelmode, vehicleNum) {
    var selectedTravelMode = document.getElementById(travelmode).value;
    var vehicleNum = document.getElementById(vehicleNum);

    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);

    var travelModeElements = elements.filter(function (element) {
        return element.id.startsWith('travelmode');
    });

    var vehicleNumElements = elements.filter(function (element) {
        return element.id.startsWith('vehiclediv');
    });

    var selectedTravelMode = document.getElementById(travelModeElements[0].id).value;
    var vehicleNum = document.getElementById(vehicleNumElements[0].id);

    if (selectedTravelMode == 'By Car') {
        vehicleNum.style.display = 'block';
    } else {
        vehicleNum.style.display = 'none';
    }

}

function validatePercentage(input) {
    var rodisc = document.getElementById(input).value;
    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);
    var rodiscElements = elements.filter(function (element) {
        return element.id.startsWith('rodisc');
    });
    var rodisc = document.getElementById(rodiscElements[0].id);
    if (rodisc.value > 100) {
        rodisc.value = '';
    }
    if (isNaN(rodisc.value)) {
        rodisc.value = '';
    }
    if (rodisc.value < 0) {
        rodisc.value = '';
    }
}

function validatePercentagers(input) {
    var rodisc = document.getElementById(input).value;

    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);
    var rodiscElements = elements.filter(function (element) {
        return element.id.startsWith('rsdisc');
    });

    var rodisc = document.getElementById(rodiscElements[0].id);

    if (rodisc.value > 100) {
        rodisc.value = '';
    }

    if (isNaN(rodisc.value)) {
        rodisc.value = '';
    }

    if (rodisc.value < 0) {
        rodisc.value = '';
    }

}

function DisplayIssueFields(idType, issuefielda, issuefieldb, issuefieldc) {
    var selectedIdType = document.getElementById(idType).value;
    var issuefielda = document.getElementById(issuefielda);
    var issuefieldb = document.getElementById(issuefieldb);
    var issuefieldc = document.getElementById(issuefieldc);
    // console.log(selectedIdType);

    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);

    var idTypeelements = elements.filter(function (element) {
        return element.id.startsWith('idType');
    });

    var idTypeaelements = elements.filter(function (element) {
        return element.id.startsWith('issuefielda');
    });

    var idTypebelements = elements.filter(function (element) {
        return element.id.startsWith('issuefieldb');
    });

    var idTypecelements = elements.filter(function (element) {
        return element.id.startsWith('issuefieldc');
    });

    var selectedIdType = document.getElementById(idTypeelements[0].id).value;
    var idtype1 = document.getElementById(idTypeaelements[0].id);
    var idtype2 = document.getElementById(idTypebelements[0].id);
    var idtype3 = document.getElementById(idTypecelements[0].id);

    if (selectedIdType === 'Passport') {
        idtype1.style.display = 'block';
        idtype2.style.display = 'block';
        idtype3.style.display = 'block';
    } else {
        idtype1.style.display = 'none';
        idtype2.style.display = 'none';
        idtype3.style.display = 'none';
    }
}


function validatemob(mobile, errorid) {
    var mobile = document.getElementById(mobile);
    var errorid = document.getElementById(errorid);

    if (mobile.value.length < 10) {
        mobile.setAttribute('maxlength', '10');
        mobile.setAttribute('minlength', '10');
        mobile.required = true;
        errorid.style.display = 'block';
    } else {
        mobile.removeAttribute('maxlength');
        mobile.removeAttribute('minlength');
        mobile.required = false;
        errorid.style.display = 'none';
    }

}

function DisplayBillingField(paymentMethod, billingfield) {
    var selectedPaymentMethod = document.getElementById(paymentMethod).value;
    var billingfield = document.getElementById(billingfield);

    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);

    var paymentMethodElements = elements.filter(function (element) {
        return element.id.startsWith('paymentMethod');
    });

    var billingfieldElements = elements.filter(function (element) {
        return element.id.startsWith('billingfield');
    });

    var selectedPaymentMethod = document.getElementById(paymentMethodElements[0].id).value;
    var billingfield = document.getElementById(billingfieldElements[0].id);

    if (selectedPaymentMethod === 'Bill To Company') {
        billingfield.style.display = 'block';
    } else {
        billingfield.style.display = 'none';
    }

}

function validateAadhar(idType, idNumber, iderr) {
    var selectedIdType = document.getElementById(idType).value;
    var idNumberInput = document.getElementById(idNumber);
    var idNumberError = document.getElementById(iderr);

    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);
    var idTypeelements = elements.filter(function (element) {
        return element.id.startsWith('idType');
    });

    var idNumberElements = elements.filter(function (element) {
        return element.id.startsWith('idNumber');
    });

    var idNumberErrorElements = elements.filter(function (element) {
        return element.id.startsWith('idNumberError');
    });

    var selectedIdType = document.getElementById(idTypeelements[0].id).value;
    var idNumberInput = document.getElementById(idNumberElements[0].id);
    var idNumberError = document.getElementById(idNumberErrorElements[0].id);

    if (selectedIdType == 'Aadhar Card' && idNumberInput.value.length < 12) {
        idNumberInput.value = '';
        idNumberInput.setAttribute('maxlength', '12');
        idNumberInput.setAttribute('minlength', '12');
        idNumberInput.required = true;
        idNumberError.style.display = 'block';
    } else {
        idNumberInput.removeAttribute('maxlength');
        idNumberInput.removeAttribute('minlength');
        idNumberInput.required = false;
        idNumberError.style.display = 'none';
    }

}



function PasteToModal() {
    const nameValue = document.getElementById("name").value;
    document.getElementById("guestname").value = nameValue;
    const greetingsValue = document.getElementById("greetings").value;
    document.getElementById("greetingsguest").value = greetingsValue;
    const mobileValue = document.getElementById("mobile").value;
    document.getElementById("guestmobile").value = mobileValue;
    const emailValue = document.getElementById("email").value;
    document.getElementById("guestemail").value = emailValue;
    const cityValue = document.getElementById("cityname").value;
    document.getElementById("cityguest").value = cityValue;
    document.getElementById("arrfrom").value = cityValue;
    document.getElementById("destination").value = cityValue;
    const stateElement = document.getElementById("state");
    const stateText = stateElement.options[stateElement.selectedIndex].text;
    const stateValue = stateElement.value;
    const gueststate = document.getElementById("stateguest");
    gueststate.innerHTML = '<option value="' + stateValue + '">' + stateText + '</option>';
    const countryElement = document.getElementById("country");
    const countryText = countryElement.options[countryElement.selectedIndex].text;
    const countryValue = countryElement.value;
    const guestcountry = document.getElementById("countryguest");
    guestcountry.innerHTML = '<option value="' + countryValue + '">' + countryText + '</option>';
    const zipcodevalue = document.getElementById("zipcode").value;
    document.getElementById("zipguest").value = zipcodevalue;
    const nationalityElement = document.getElementById('nationality');
    const nationalityValue = nationalityElement.value;
    const nationalityText = nationalityElement.options[nationalityElement.selectedIndex].text;
    const guestnationality = document.getElementById("nationalityother");
    guestnationality.innerHTML = '<option value="' + nationalityValue + '">' + nationalityText + '</option>';
}

function PasteToModalnum(index) {
    const nameValue = document.getElementById("name" + index).value ? nameValue : '';
    document.getElementById("guestname" + index).value = nameValue;
    const greetingsValue = document.getElementById("greetings" + index).value;
    document.getElementById("greetingsguest" + index).value = greetingsValue;
    const mobileValue = document.getElementById("mobile" + index).value;
    document.getElementById("guestmobile" + index).value = mobileValue;
    const emailValue = document.getElementById("email" + index).value;
    document.getElementById("guestemail" + index).value = emailValue;
    const cityValue = document.getElementById("cityname" + index).value;
    document.getElementById("destination" + index).value = cityValue;
    document.getElementById("arrfrom" + index).value = cityValue;
    document.getElementById("cityguest" + index).value = cityValue;
    const stateElement = document.getElementById("state" + index);
    const stateText = stateElement.options[stateElement.selectedIndex].text;
    const stateValue = stateElement.value;
    const gueststate = document.getElementById("stateguest" + index);
    gueststate.innerHTML = '<option value="' + stateValue + '">' + stateText + '</option>';
    const countryElement = document.getElementById("country" + index);
    const countryText = countryElement.options[countryElement.selectedIndex].text;
    const countryValue = countryElement.value;
    const guestcountry = document.getElementById("countryguest" + index);
    guestcountry.innerHTML = '<option value="' + countryValue + '">' + countryText + '</option>';
    const zipcodevalue = document.getElementById("zipcode" + index).value;
    document.getElementById("zipguest" + index).value = zipcodevalue;
    const nationalityElement = document.getElementById('nationality' + index);
    const nationalityValue = nationalityElement.value;
    const nationalityText = nationalityElement.options[nationalityElement.selectedIndex].text;
    const guestnationality = document.getElementById("nationalityother" + index);
    guestnationality.innerHTML = '<option value="' + nationalityValue + '">' + nationalityText + '</option>';
}

function validateForm(event) {
    event.preventDefault();

    const fields = [
        {
            id: "company_name",
            errorId: "company_name_error",
            validations: [
                { type: "required", message: "Please Enter Company Name" }
            ]
        },
        {
            id: "username",
            errorId: "username_error",
            validations: [
                { type: "required", message: "Please Enter Username" },
                { type: "minLength", value: 2, message: "At least 2 characters are required" }
            ]
        },
        // {
        //     id: "mobile",
        //     errorId: "mobile_error",
        //     validations: [
        //         { type: "required", message: "Please Enter Mobile Number" },
        //         { type: "mobile", message: "Only Numbers Are Allowed" }
        //     ]
        // },
        {
            id: "sn_num",
            errorId: "sn_num_error",
            validations: [
                { type: "required", message: "Please Enter SN Number" }
            ]
        },
        {
            id: "email",
            errorId: "email_error",
            validations: [
                { type: "required", message: "Please Enter Email" }
            ]
        },
        {
            id: "pin",
            errorId: "pin_error",
            validations: [
                { type: "required", message: "Please Enter PIN" }
            ]
        },
        {
            id: "legal_name",
            errorId: "legal_name_error",
            validations: [
                { type: "required", message: "Please Enter Legal Name" }
            ]
        },
        {
            id: "trade_name",
            errorId: "trade_name_error",
            validations: [
                { type: "required", message: "Please Enter Trade Name" }
            ]
        },
        {
            id: "start_date",
            errorId: "start_date_error",
            validations: [
                { type: "required", message: "Please select start date" }
            ]
        },
        {
            id: "end_date",
            errorId: "end_date_error",
            validations: [
                { type: "required", message: "Please select End date" }
            ]
        },
        {
            id: "address1",
            errorId: "address1_error",
            validations: [
                { type: "required", message: "Please Enter Address 1" }
            ]
        },
        {
            id: "country_select",
            errorId: "country_error",
            validations: [
                { type: "required", message: "Please Select a Country" }
            ]
        },
        {
            id: "state_select",
            errorId: "state_error",
            validations: [
                { type: "required", message: "Please Select a state" }
            ]
        },
        {
            id: "city",
            errorId: "city_error",
            validations: [
                { type: "required", message: "Please Enter City Name" }
            ]
        },
        {
            id: "password",
            errorId: "password_error",
            validations: [
                { type: "required", message: "Password can't be Empty." },
                { type: "minLength", value: 4, message: "At least 4 characters are required" }
            ]
        },
        {
            id: "logo_property",
            errorId: "logo_property_error",
            validations: [
                { type: "required", message: "Please Select a Logo Must be type image" },
                { type: "maxsize", message: "Size should not be more than 2 MB" }
            ]
        }
    ];


    let hasErrors = false;

    fields.forEach(field => {
        const input = document.getElementById(field.id);
        const error = document.getElementById(field.errorId);
        const value = input.value.trim();

        error.innerText = "";
        input.classList.remove("is-invalid");

        field.validations.some(validation => {
            switch (validation.type) {
                case "required":
                    if (value === "") {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "minLength":
                    if (value.length < validation.value) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "greaterThan":
                    const referenceValue = document.getElementById(validation.reference).value;
                    if (value !== "" && referenceValue !== "" && value < referenceValue) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "fileSizeMax":
                    const maxFileSizeMB = 2;
                    if (value !== "" && input.files && input.files[0]) {
                        const fileSizeMB = input.files[0].size / (1024 * 1024);
                        if (fileSizeMB > maxFileSizeMB) {
                            input.classList.add("is-invalid");
                            hasErrors = true;
                            return true;
                        }
                    }
                    break;
                case "mobile":
                    if (!/^[0-9]{1,10}$/.test(value)) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
            }
        });

        if (hasErrors) return;
    });

    if (!hasErrors) {
        document.getElementById("companyregform").submit();
    }
}

function validateFormUpdate(event) {
    event.preventDefault();

    const fields = [
        {
            id: "company_name",
            errorId: "company_name_error",
            validations: [
                { type: "required", message: "Please Enter Company Name" }
            ]
        },
        {
            id: "username",
            errorId: "username_error",
            validations: [
                { type: "required", message: "Please Enter Username" },
                { type: "minLength", value: 2, message: "At least 2 characters are required" }
            ]
        },
        // {
        //     id: "mobile",
        //     errorId: "mobile_error",
        //     validations: [
        //         { type: "required", message: "Please Enter Mobile Number" },
        //         { type: "mobile", message: "Only Numbers Are Allowed" }
        //     ]
        // },
        {
            id: "sn_num",
            errorId: "sn_num_error",
            validations: [
                { type: "required", message: "Please Enter SN Number" }
            ]
        },
        {
            id: "email",
            errorId: "email_error",
            validations: [
                { type: "required", message: "Please Enter Email" }
            ]
        },
        {
            id: "pin",
            errorId: "pin_error",
            validations: [
                { type: "required", message: "Please Enter PIN" }
            ]
        },
        {
            id: "legal_name",
            errorId: "legal_name_error",
            validations: [
                { type: "required", message: "Please Enter Legal Name" }
            ]
        },
        {
            id: "trade_name",
            errorId: "trade_name_error",
            validations: [
                { type: "required", message: "Please Enter Trade Name" }
            ]
        },
        {
            id: "start_date",
            errorId: "start_date_error",
            validations: [
                { type: "required", message: "Please select start date" }
            ]
        },
        {
            id: "end_date",
            errorId: "end_date_error",
            validations: [
                { type: "required", message: "Please select End date" }
            ]
        },
        {
            id: "address1",
            errorId: "address1_error",
            validations: [
                { type: "required", message: "Please Enter Address 1" }
            ]
        },
        {
            id: "country_select",
            errorId: "country_error",
            validations: [
                { type: "required", message: "Please Select a Country" }
            ]
        },
        {
            id: "state_select",
            errorId: "state_error",
            validations: [
                { type: "required", message: "Please Select a state" }
            ]
        },
        {
            id: "city",
            errorId: "city_error",
            validations: [
                { type: "required", message: "Please Enter City Name" }
            ]
        }
    ];


    let hasErrors = false;

    fields.forEach(field => {
        const input = document.getElementById(field.id);
        const error = document.getElementById(field.errorId);
        const value = input.value.trim();

        error.innerText = "";
        input.classList.remove("is-invalid");

        field.validations.some(validation => {
            switch (validation.type) {
                case "required":
                    if (value === "") {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "minLength":
                    if (value.length < validation.value) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "greaterThan":
                    const referenceValue = document.getElementById(validation.reference).value;
                    if (value !== "" && referenceValue !== "" && value < referenceValue) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
                case "fileSizeMax":
                    const maxFileSizeMB = 2;
                    if (value !== "" && input.files && input.files[0]) {
                        const fileSizeMB = input.files[0].size / (1024 * 1024);
                        if (fileSizeMB > maxFileSizeMB) {
                            input.classList.add("is-invalid");
                            hasErrors = true;
                            return true;
                        }
                    }
                    break;
                case "mobile":
                    if (!/^[0-9]{1,10}$/.test(value)) {
                        error.innerText = validation.message;
                        input.classList.add("is-invalid");
                        hasErrors = true;
                        return true;
                    }
                    break;
            }
        });

        if (hasErrors) return;
    });

    if (!hasErrors) {
        document.getElementById("companyregformupdate").submit();
    }
}

function confirmBan(propertyId) {
    var result = confirm("Are you sure you want to InActive this property?");
    if (result) {
        window.location.href = "disablepropertyadmin?propertyid=" + propertyId;
    }
    return false;
}

function confirmUnban(propertyId) {
    var result = confirm("Are you sure you want to Active this property?");
    if (result) {
        window.location.href = "enablepropertyadmin?propertyid=" + propertyId;
    }
    return false;
}

function confirmBanUserMaster(userId) {
    var result = confirm("Are you sure you want to InActive this user?");
    if (result) {
        window.location.href = "disableusermaster?userId=" + userId;
    }
    return false;
}

function confirmUnbanUserMaster(userId) {
    var result = confirm("Are you sure you want to Active this user?");
    if (result) {
        window.location.href = "enableusermaster?userId=" + userId;
    }
    return false;
}

function confirmBanUserMaster2(userId) {
    var result = confirm("Are you sure you want to InActive this user?");
    if (result) {
        window.location.href = "disableusermaster2?userId=" + userId;
    }
    return false;
}

function confirmUnbanUserMaster2(userId) {
    var result = confirm("Are you sure you want to Active this user?");
    if (result) {
        window.location.href = "enableusermaster2?userId=" + userId;
    }
    return false;
}

function Enableformshow() {
    var inputs = document.querySelectorAll('form input');
    var button = document.getElementById('edit-btn');
    var submitbtnindex = document.getElementById('submitbtnindex');
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].classList.contains('form-visible')) {
            inputs[i].classList.remove('form-visible');
            inputs[i].classList.add('form-invisible');
            inputs[i].disabled = true;
            submitbtnindex.style.display = 'none';
            button.classList.remove('btn-whatsapp')
            button.classList.add('btn-dark')
        } else {
            inputs[i].classList.remove('form-invisible');
            inputs[i].classList.add('form-visible');
            inputs[i].disabled = false;
            submitbtnindex.style.display = 'block';
            button.classList.remove('btn-dark')
            button.classList.add('btn-whatsapp')
        }
    }
}

function checkNum(input) {
    let maxLength = 10;
    let pattern = /[A-Za-z!@#$%^&*()\-_+={[}\]|\\:;"'<,>?/]/g;
    let value = input.value.trim();
    if (value.length > maxLength) {
        input.value = value.substring(0, maxLength);
    } else if (pattern.test(value)) {
        input.value = value.replace(pattern, "");
    }
}

function checkNumMax(input, maxLength) {
    let pattern = /[^0-9.]/g;
    let value = input.value.trim();
    if (value.length > maxLength) {
        input.value = value.substring(0, maxLength);
    } else if (pattern.test(value)) {
        input.value = value.replace(pattern, "");
    }
}

function MaxVal(input, maxallowed) {
    let value = input.value.trim();
    if (value > maxallowed) {
        input.value = maxallowed;
    }
}

function ValidateNum(input, minValue, maxValue, maxLength, minLength) {
    input.value = input.value.replace(/[^0-9]/g, '');
    const numValue = parseInt(input.value, 10);
    if (numValue < parseInt(minValue, 10)) {
        input.value = minValue;
    } else if (numValue > parseInt(maxValue, 10)) {
        input.value = maxValue;
    }
    if (input.value.length > parseInt(maxLength, 10)) {
        input.value = input.value.slice(0, maxLength);
    } else if (input.value.length < parseInt(minLength, 10)) {
        input.value = minValue;
    }
}

function submitUpdateForm(sn, sub_code) {
    document.getElementById('snInput').value = sn;
    document.getElementById('subCodeInput').value = sub_code;
    document.getElementById('updateForm').submit();
    console.log(document.getElementById('subCodeInput').value);
    event.preventDefault();
}

document.addEventListener("keydown", function (event) {
    if (event.shiftKey && event.key === "D") {
        const table = document.getElementById("gridtaxstructure");
        if (table.rows.length > 2) {
            table.deleteRow(table.rows.length - 1);
            rowCount--;
        }
    }
});

function calculateAge() {
    const birthdateInput = document.getElementById('birthdate');
    const ageInput = document.getElementById('age');
    const birthdate = new Date(birthdateInput.value);
    const now = new Date();
    const diff = now.getTime() - birthdate.getTime();
    const ageDate = new Date(diff);
    const age = Math.abs(ageDate.getUTCFullYear() - 1970);
    ageInput.value = age;
}

$(document).ready(function () {
    $('#flag').on('change', function () {
        var flag = this.value;
        if (flag == 'Category') {
            $("#type").html(
                '<option value="">Select</option><option value="Tobacco">Tobacco</option><option value="Food">Food</option><option value="Beverage">Beverage</option><option value="Liquor">Liquor</option><option value="Confectionary">Confectionary</option><option value="Miscellaneous">Miscellaneous</option>'
            );
        } else {
            $("#type").html(
                '<option value="">Select</option><option value="Cr">Cr</option><option value="Dr">Dr</option>'
            );
        }
    });
});

$(document).ready(function () {
    $('#upflag').on('change', function () {
        var flag = this.value;
        if (flag == 'Category') {
            $("#uptype").html(
                '<option value="">Select</option><option value="Tobacco">Tobacco</option><option value="Food">Food</option><option value="Beverage">Beverage</option><option value="Liquor">Liquor</option><option value="Confectionary">Confectionary</option><option value="Miscellaneous">Miscellaneous</option>'
            );
        } else {
            $("#uptype").html(
                '<option value="">Select</option><option value="Cr">Cr</option><option value="Dr">Dr</option>'
            );
        }
    });
});

function handleDecimalInput(event) {
    const input = event.target;
    clearTimeout(input.timer);
    input.timer = setTimeout(function () {
        let value = input.value;
        if (isNaN(value)) {
            value = "9999999.00";
        } else if (parseFloat(value) > 9999999) {
            value = "9999999.99";
        } else if (value !== "" && !/\.\d{2}$/.test(value)) {
            value = parseFloat(value).toFixed(2);
        }
        input.value = value;
    }, 1000);
}

const decimalInputs = document.querySelectorAll(".decimal-input");

function handlePercent(event) {
    const input = event.target;
    clearTimeout(input.timer);
    input.timer = setTimeout(function () {
        let value = input.value;
        if (isNaN(value)) {
            value = "100.00";
        } else if (parseFloat(value) > 99) {
            value = "100.00";
        } else if (value !== "" && !/\.\d{2}$/.test(value)) {
            value = parseFloat(value).toFixed(2);
        }
        input.value = value;
    }, 1000);
}

const percentInputs = document.querySelectorAll(".percent-inputs");

let rowCount = 1;


function checkFile(input, maxFileSize, acceptedExtensions) {
    const file = input.files[0];
    if (file) {
        if (file.size > convertToBytes(maxFileSize)) {
            alert('File size exceeds the maximum allowed size (' + maxFileSize + ').');
            input.value = '';
            return;
        }
        const fileName = file.name;
        const fileExtension = fileName.split('.').pop().toLowerCase();
        if (!acceptedExtensions.includes(fileExtension)) {
            alert('Invalid file extension. Accepted extensions are ' + acceptedExtensions.join(', '));
            input.value = '';
        }
    }
}
function convertToBytes(size) {
    const units = {
        'kb': 1024,
        'mb': 1024 * 1024,
        'gb': 1024 * 1024 * 1024,
    };
    const match = size.match(/^(\d+(?:\.\d+)?)\s*([a-z]+)?$/);
    const amount = parseFloat(match[1]);
    const unit = match[2].toLowerCase();
    return amount * (units[unit] || 1);
}

function LoadNext(select, divID, inputID) {
    var div = document.getElementById(divID);
    var input = document.getElementById(inputID);

    if (select.value == 'Y') {
        div.classList.remove('none');
        input.required = true;
    } else {
        div.classList.add('none');
        input.value = '';
        input.required = false;
    }
}

function LoadNext2(select, divID, inputID, inputID2) {
    var div = document.getElementById(divID);
    var input = document.getElementById(inputID);
    var input2 = document.getElementById(inputID2);

    if (select.value != '') {
        div.classList.remove('none');
        input.required = true;
        input2.required = true;
    } else {
        div.classList.add('none');
        input.value = '';
        input.required = false;
        input2.value = '';
        input2.required = false;
    }

    if (select.value < 1) {
        div.classList.add('none');
        input.value = '';
        input.required = false;
        input2.value = '';
        input2.required = false;
    }
    select.value = removeLeadingZeros(select.value);
}

function removeLeadingZeros(input) {
    return input.replace(/^0+/, "");
}



function CalcPercent(minamt, mainamt, percentId) {
    var roomRate = parseFloat(minamt.value);
    var packageAmount = parseFloat(document.getElementById(mainamt).value);

    if (!isNaN(roomRate) && !isNaN(packageAmount)) {
        const calculatedPercent = (roomRate / packageAmount) * 100;
        document.getElementById(percentId).value = calculatedPercent.toFixed(2);
    }

    if (roomRate > packageAmount) {
        minamt.value = '';
        document.getElementById(percentId).value = '';
    }

    if (isNaN(roomRate)) {
        roomRate = '';
    }
    minamt.value = removeLeadingZeros(minamt.value);
}

function CalcPercent2(priceadultv, mainamt, percentId, netofamt, pricechildv) {
    var roomRate = parseFloat(document.getElementById(priceadultv).value);
    var packageAmount = parseFloat(document.getElementById(mainamt).value);
    var totaladult = parseInt(document.getElementById('adults').value) || 0;
    var totalchild = parseInt(document.getElementById('childs').value) || 0;
    var priceadult = parseInt(document.getElementById(priceadultv).value);
    var net_amount = document.getElementById(netofamt);
    var pricechild = parseInt(document.getElementById(pricechildv).value);

    if (!isNaN(roomRate) && !isNaN(packageAmount)) {
        var sumof = (priceadult * totaladult);
        net_amount.value = sumof;
        const calculatedPercent = (totaladult * roomRate / packageAmount) * 100;
        document.getElementById(percentId).value = calculatedPercent.toFixed(2);
    }

    if (!isNaN(pricechild) && !isNaN(roomRate) && !isNaN(packageAmount)) {
        var sumof = (priceadult * totaladult) + (pricechild * totalchild);
        net_amount.value = sumof;
        const calculatedPercent = sumof / packageAmount * 100;
        document.getElementById(percentId).value = calculatedPercent.toFixed(2);
    }

    if (roomRate > packageAmount || sumof > packageAmount) {
        document.getElementById(priceadultv).value = '';
        document.getElementById(percentId).value = '';
    }

    if (net_amount.value > packageAmount) {
        net_amount.value = '';
    }

    if (isNaN(roomRate)) {
        roomRate = '';
    }

    document.getElementById(priceadultv).value = removeLeadingZeros(document.getElementById(priceadultv).value);
}

function CalcAmount(percentId, mainamt, minamt) {
    var packageAmount = parseFloat(document.getElementById(mainamt).value);
    var percentage = parseFloat(percentId.value);
    var resultElement = document.getElementById(minamt);

    if (!isNaN(percentage) && !isNaN(packageAmount)) {
        const calculatedAmt = (percentage / 100) * packageAmount;
        resultElement.value = calculatedAmt.toFixed(2);
    } else {
        resultElement.value = '';
    }

    if (percentage > 99.99) {
        percentId.value = '';
        resultElement.value = '';
    }
}

function RemoveRead(main, second, third, fourth) {
    if (main.value == 'Y') {
        document.getElementById(second).readOnly = false;
    } else {
        document.getElementById(second).readOnly = true;
        document.getElementById(second).value = '';
    }

    if (main.value == 'N') {
        document.getElementById(third).readOnly = false;
        document.getElementById(fourth).readOnly = false;
    } else {
        document.getElementById(third).readOnly = true;
        document.getElementById(fourth).readOnly = true;
        document.getElementById(third).value = '';
        document.getElementById(fourth).value = '';
    }

}

async function Submiton() {
    var lasttotal = parseInt(document.getElementById('lasttotal').value);
    var packageAmount = parseFloat(document.getElementById('package_amount').value);
    await sleep(2000);
    lasttotal = parseInt(document.getElementById('lasttotal').value);
    var plansubmit = document.getElementById('plansubmit');
    if (lasttotal == packageAmount) {
        plansubmit.disabled = false;
    } else {
        plansubmit.disabled = true;
    }
}

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


// async function sleep(ms) {
//     return new Promise(resolve => setTimeout(resolve, ms));
// }

function UpdateTotal() {
    var roomrate = parseFloat(document.getElementById('room_rate').value);
    var firstnetamt = parseInt(document.getElementById('net_amount').value);
    var total = roomrate + firstnetamt;
    var nettotal = firstnetamt;
    var rowCount = document.getElementById("gridtaxstructure").rows.length;
    for (var i = 1; i < rowCount; i++) {
        var netAmountField = document.getElementById('net_amount' + i);
        if (netAmountField) {
            var netAmount = parseFloat(netAmountField.value);
            if (!isNaN(netAmount)) {
                total += netAmount;
                nettotal += netAmount;
            }
        }
    }
    document.getElementById('lasttotal').value = total;
    document.getElementById('totalroomrate').value = nettotal;
}

function DisplayTable(inputId, tableId) {
    var table = document.getElementById(tableId);
    var input = document.getElementById(inputId);

    if (input.value != '') {
        table.classList.remove('none');
    } else {
        table.classList.add('none');
        var tableInputs = table.querySelectorAll('input, select');
        tableInputs.forEach(function (tableInput, index) {
            if (tableInput.tagName === 'INPUT') {
                tableInput.value = '';
            } else if (tableInput.tagName === 'SELECT') {
                tableInput.selectedIndex = 0;
            }
        });
    }
}

function CalcPercent3(percentvalue, package_amount, net_amount) {
    const percent = parseFloat(document.getElementById(percentvalue).value);
    const packageAmount = parseFloat(document.getElementById(package_amount).value);
    const netAmount = (packageAmount * percent) / 100;
    document.getElementById(net_amount).value = netAmount;
}

function getTime() {
    var now = new Date();
    var hours = now.getHours();
    var minutes = now.getMinutes();
    return hours + ':' + (minutes < 10 ? '0' : '') + minutes;
}


// function validateDates() {
//     const checkinDateInput = document.getElementsByName('checkindate')[0];
//     const checkoutDateInput = document.getElementsByName('checkoutdate')[0];
//     const dayDifferenceInput = document.getElementsByName('stay_days')[0];
//     const dateError = document.getElementById('date-error');

//     const checkinDate = new Date(checkinDateInput.value);
//     const checkoutDate = new Date(checkoutDateInput.value);

//     if (checkoutDate < checkinDate) {
//         dateError.textContent = "Checkout date cannot be earlier than check-in date";
//         checkinDateInput.value = "";
//         checkoutDateInput.value = "";
//         dayDifferenceInput.value = "";
//     } else if (checkinDate.getTime() === checkoutDate.getTime()) {
//         dateError.textContent = "";
//         checkoutDate.setDate(checkoutDate.getDate() + 1);
//         checkoutDateInput.value = formatDate(checkoutDate);
//         const timeDifference = Math.abs(checkoutDate - checkinDate);
//         const dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
//         dayDifferenceInput.value = dayDifference;
//     } else {
//         dateError.textContent = "";
//         const timeDifference = Math.abs(checkoutDate - checkinDate);
//         const dayDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
//         dayDifferenceInput.value = dayDifference;
//     }
// }

function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

function FutureDtNA(dateInput) {
    var inputDate = new Date(dateInput.value);
    var currentDate = new Date();
    var errorText = document.createElement("p");
    var errorTextNode = document.createTextNode("Please select a date in the past or today.");
    if (inputDate > currentDate) {
        errorText.style.color = "red";
        errorText.appendChild(errorTextNode);
        dateInput.value = "";
        document.body.appendChild(errorText);
        setTimeout(function () {
            errorText.remove();
        }, 5000);
    }
}

function PastDtNA(dateInput) {
    var inputDate = new Date(dateInput.value);
    var currentDate = new Date();
    var errorText = document.createElement("p");
    var errorTextNode = document.createTextNode("Please select a date in the future or today.");
    if (inputDate < currentDate) {
        errorText.style.color = "red";
        errorText.appendChild(errorTextNode);
        dateInput.value = "";
        document.body.appendChild(errorText);
        setTimeout(function () {
            errorText.remove();
        }, 5000);
    }
}

function openFileInput(inputId) {
    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);
    var profileImageElements = elements.filter(function (element) {
        return element.id.startsWith('profileimage');
    });
    document.getElementById(profileImageElements[1].id).click();
}

function readURL(input, previewId) {
    if (input.files && input.files[0]) {
        var elements = document.querySelectorAll('#' + currentModalId + ' *');
        elements = Array.from(elements);
        var profileImageElements = elements.filter(function (element) {
            return element.id.startsWith('profileimagepreview');
        });
        previewId = profileImageElements[0].id;
        var reader = new FileReader();
        var preview = document.getElementById(previewId);

        reader.onload = function (e) {
            preview.src = e.target.result;
        };
        reader.readAsDataURL(input.files[0]);
    }
}

function openFileInput2(inputId) {
    var elements = document.querySelectorAll('#' + currentModalId + ' *');
    elements = Array.from(elements);
    var profileImageElements = elements.filter(function (element) {
        return element.id.startsWith('identityimage');
    });
    document.getElementById(profileImageElements[1].id).click();
}

function readURL2(input, previewId) {
    if (input.files && input.files[0]) {
        var elements = document.querySelectorAll('#' + currentModalId + ' *');
        elements = Array.from(elements);
        var profileImageElements = elements.filter(function (element) {
            return element.id.startsWith('identityimagepreview');
        });
        previewId = profileImageElements[0].id;
        var reader = new FileReader();
        var preview = document.getElementById(previewId);

        reader.onload = function (e) {
            preview.src = e.target.result;
        };
        reader.readAsDataURL(input.files[0]);
    }
}

function DeleteData() {
    document.getElementById('profileimagepreview').src = 'admin/images/preview.gif';
    document.getElementById('profileimage').value = '';
    document.getElementById('identityimagepreview').src = 'admin/images/preview.gif';
    document.getElementById('identityimage').value = '';
    document.getElementById('greetingsguest').value = '';
    document.getElementById('guestname').value = '';
    document.getElementById('guestmobile').value = '';
    document.getElementById('guestemail').value = '';
    document.getElementById('genderguest').value = '';
    document.getElementById('cityguest').value = '';
    document.getElementById('stateguest').value = '';
    document.getElementById('countryguest').value = '';
    document.getElementById('zipguest').value = '';
    document.getElementById('idType').value = '';
    document.getElementById('idNumber').value = '';
    document.getElementById('issuingcity').value = '';
    document.getElementById('issuingcountry').value = '';
    document.getElementById('expiryDate').value = '';
    document.getElementById('paymentMethod').value = '';
    document.getElementById('billingAccount').value = '';
    document.getElementById('birthDate').value = '';
    document.getElementById('nationalityother').value = '';
    document.getElementById('vipStatus').value = '';
    document.getElementById('weddingAnniversary').value = '';
    document.getElementById('destination').value = '';
    document.getElementById('vehiclenum').value = '';
    document.getElementById('travelmode').value = '';
    document.getElementById('rsdisc').value = '';
    document.getElementById('rodisc').value = '';
    document.getElementById('marital_status').value = '';
    document.getElementById('purpofvisit').value = '';
    document.getElementById('arrfrom').value = '';
    document.getElementById('destination').value = '';
}


function DisplayCheckout() {
    const checkinDateInput = document.getElementById("checkindate");
    const stayDaysInput = document.getElementById("stay_days");
    const checkoutDateInput = document.getElementById("checkoutdate");

    stayDaysInput.addEventListener("input", function () {
        const checkinDate = new Date(checkinDateInput.value);
        const stayDays = parseInt(stayDaysInput.value);
        checkinDate.setDate(checkinDate.getDate() + stayDays);
        const checkoutDate = checkinDate.toISOString().split('T')[0];
        checkoutDateInput.value = checkoutDate;
    });
}

function startWebcam(imagefirst, openWebcamBtn, webcamContainer, closeBtn, videoElement, captureBtn, capturedImageCanvas) {
    var initialImage = document.getElementById(imagefirst);
    var openWebcamBtn = document.getElementById(openWebcamBtn);
    var webcamContainer = document.getElementById(webcamContainer);
    var closeBtn = document.getElementById(closeBtn);
    var webcam = document.getElementById(videoElement);
    var captureBtn = document.getElementById(captureBtn);
    var capturedImageCanvas = document.getElementById(capturedImageCanvas);
    var ctx = capturedImageCanvas.getContext('2d');

    async function openWebcam() {
        try {
            var stream = await navigator.mediaDevices.getUserMedia({
                video: true
            });
            webcam.srcObject = stream;
            webcamContainer.style.display = 'block';
            webcam.play();
            captureBtn.style.display = 'block';
        } catch (error) {
            console.error('Error accessing the webcam: ', error);
        }
    }

    captureBtn.addEventListener('click', () => {
        capturedImageCanvas.width = webcam.videoWidth;
        capturedImageCanvas.height = webcam.videoHeight;
        ctx.clearRect(0, 0, capturedImageCanvas.width, capturedImageCanvas.height);
        ctx.drawImage(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight);
        initialImage.src = capturedImageCanvas.toDataURL();
        webcam.srcObject.getTracks().forEach(track => track.stop());
        webcamContainer.style.display = 'none';
        captureBtn.style.display = 'none';
        openWebcamBtn.style.display = 'block';
    });


    closeBtn.addEventListener('click', () => {
        webcam.srcObject.getTracks().forEach(track => track.stop());
        webcamContainer.style.display = 'none';
        captureBtn.style.display = 'none';
        openWebcamBtn.style.display = 'block';
    });

    openWebcam();
}

function startWebcam(imagefirst, openWebcamBtn, webcamContainer, closeBtn, videoElement, captureBtn, capturedImageCanvas) {
    var initialImage = document.getElementById(imagefirst);
    var openWebcamBtn = document.getElementById(openWebcamBtn);
    var webcamContainer = document.getElementById(webcamContainer);
    var closeBtn = document.getElementById(closeBtn);
    var webcam = document.getElementById(videoElement);
    var captureBtn = document.getElementById(captureBtn);
    var capturedImageCanvas = document.getElementById(capturedImageCanvas);
    var ctx = capturedImageCanvas.getContext('2d');

    async function openWebcam() {
        try {
            var stream = await navigator.mediaDevices.getUserMedia({
                video: true
            });
            webcam.srcObject = stream;
            webcamContainer.style.display = 'block';
            webcam.play();
            captureBtn.style.display = 'block';
        } catch (error) {
            console.error('Error accessing the webcam: ', error);
        }
    }

    captureBtn.addEventListener('click', () => {
        initialImage.src = '';
        capturedImageCanvas.width = webcam.videoWidth;
        capturedImageCanvas.height = webcam.videoHeight;
        ctx.clearRect(0, 0, capturedImageCanvas.width, capturedImageCanvas.height);
        ctx.drawImage(webcam, 0, 0, webcam.videoWidth, webcam.videoHeight);
        initialImage.src = capturedImageCanvas.toDataURL();
        webcam.srcObject.getTracks().forEach(track => track.stop());
        webcamContainer.style.display = 'none';
        captureBtn.style.display = 'none';
        openWebcamBtn.style.display = 'block';
    });



    closeBtn.addEventListener('click', () => {
        webcam.srcObject.getTracks().forEach(track => track.stop());
        webcamContainer.style.display = 'none';
        captureBtn.style.display = 'none';
        openWebcamBtn.style.display = 'block';
    });

    openWebcam();
}





// function showLoader() {
//     $('#myloader').removeClass('none');
//     $('#myloader').addClass('d-flex');
// }

// function hideLoader() {
//     $('#myloader').removeClass('d-flex');
//     $('#myloader').addClass('none');
// }

function ajaxFormSubmit(options) {
    const {
        formId,
        submitUrl,
        submitBtnId,
        redirectUrl,
        successCallback,
        errorCallback
    } = options;

    $(`#${formId}`).on('submit', function (e) {
        e.preventDefault();
        const form = $(this);
        const submitBtn = $(`#${submitBtnId}`);
        const formData = new FormData(this);

        $.ajax({
            type: 'POST',
            url: submitUrl,
            data: formData,
            processData: false,
            contentType: false,
            beforeSend: function () {
                submitBtn.prop('disabled', true).text('Submitting...');
                showLoader();
            },
            success: function (response) {
                if (response.status === 'success') {
                    console.log(response.status);
                    pushNotify('success', 'Success', response.message, 'fade', 300, '', '', true, true, true, 5000, 20, 20, 'outline', 'right top');

                    if (successCallback) {
                        successCallback(response);
                    } else {
                        if (redirectUrl != '') {
                            setTimeout(() => {
                                window.location.href = redirectUrl;
                            }, 2000);
                        }

                    }
                } else if (response.status === 'error') {
                    console.log(response.status);
                    pushNotify('error', 'Error', response.message, 'fade', 300, '', '', true, true, true, 5000, 20, 20, 'outline', 'right top');
                    if (errorCallback) {
                        errorCallback(response);
                    }
                }
                else {
                    pushNotify('error', 'Error', response.message, 'fade', 300, '', '', true, true, true, 5000, 20, 20, 'outline', 'right top');
                }
            },
            error: function (xhr) {
                pushNotify('error', 'Error', 'Something went wrong', 'fade', 300, '', '', true, true, true, 5000, 20, 20, 'outline', 'right top');
                if (errorCallback) {
                    errorCallback(xhr);
                }
            },
            complete: function () {
                submitBtn.prop('disabled', false).text('Submit');
                hideLoader();
            }
        });
    });
}

function extractnum(text) {
    const regex = /\d+/;
    const match = text.match(regex);

    return match ? parseInt(match[0], 10) : null;
}

function handleFormSubmission(formId, buttonId, routeName) {
    $(formId).submit(function (e) {
        e.preventDefault();
        if (buttonId == 'submitBtn') {
            message = ' Updating...';
            btnname = 'Update';
        } else {
            message = ' Submitting...';
            btnname = 'Submit';
        }
        $(buttonId).prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i>' + message);
        var formData = $(this).serialize();

        $.ajax({
            url: routeName,
            type: 'POST',
            data: formData,
            success: function (response) {
                $(buttonId).prop('disabled', false).html(btnname);
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: response.message,
                }).then((result) => {
                    if (result.isConfirmed) {
                        setTimeout(function () {
                            location.reload();
                        }, 200);
                    }
                });

            },
            error: function (error) {
                $(buttonId).prop('disabled', false).html(btnname);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.responseJSON.message,
                }).then((result) => {
                    if (result.isConfirmed) {
                        setTimeout(function () {
                            location.reload();
                        }, 200);
                    }
                });
            }
        });
    });
}



function handleDeleteRequest(route, button, sn, ucode) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            var deleteButton = $(button);
            var originalText = deleteButton.html();

            deleteButton.prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> Deleting...');

            $.ajax({
                url: route,
                type: 'GET',
                data: {
                    sn: sn,
                    ucode: ucode
                },
                complete: function () {
                    deleteButton.find('i').remove();
                    deleteButton.prop('disabled', false).html(originalText);
                },
                success: function (response) {
                    Swal.fire({
                        icon: response.status ?? 'success',
                        title: 'Success',
                        text: response.message,
                    });
                    setTimeout(function () {
                        Swal.close();
                        location.reload();
                    }, 3000);
                },
                error: function (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.responseJSON.message,
                    });
                }
            });
        }
    });
}




function populateFormWithData(name, activeYN, code) {
    if (activeYN == 'Yes') {
        $("#upactiveYN").val("Y");
    } else {
        $("#upactiveYN").val("N");
    }

    $("#updatename").val(name);
    $("#updatecode").val(code);
    $("#updateModal").modal("show");
}

function populateFormWithData2(name, per, code) {
    $("#updatename").val(name);
    $("#ncper").val(per);
    $("#updatecode").val(code);
    $("#updateModal").modal("show");
}

function populateFormWithData3(name, from_time, to_time, code) {
    $("#updatename").val(name);
    $("#from_timeup").val(from_time);
    $("#to_timeup").val(to_time);
    $("#updatecode").val(code);
    $("#updateModal").modal("show");
}

function populateFormWithData4(name, activeYN, code) {
    if (activeYN == 'Yes') {
        $("#upactiveYN").val("Y");
    } else {
        $("#upactiveYN").val("N");
    }

    $("#updatename").val(name);
    $("#updatecode").val(code);
    $("#updateModal").modal("show");
}

function populateFormWithData5(name, ac_code, ac_posting, nature, code, revcodeup) {
    $("#updatename").val(name);
    $("#upac_code").val(ac_code);
    $("#upac_posting").val(ac_posting);
    $("#upnature").val(nature);
    $("#updatecode").val(code);
    $("#revcodeup").val(revcodeup);
    $("#updateModal").modal("show");
}

function populateFormWithData6(name, outlet, code, sn) {

    $("#uprest_code").val(outlet);
    $("#upname").val(name);
    $("#uprcode").val(code);
    $("#upsn").val(sn);
    $("#updateModal").modal("show");
}

function populateFormWithData7(name, barcode, hsncode, code, sn, pic) {
    let updatedBarcode = barcode.slice(0, -3);
    $("#upbarcode").val(updatedBarcode);
    $("#upname").val(name);
    $("#uphsncode").val(hsncode);
    $('#upicode').val(code);
    $("#upsn").val(sn);
    $("#olditemimage").val(pic);
    $("#updateModal").modal("show");
}


function inconPostRequest(route, method, button) {
    var postbutton = $(button);
    var originalText = postbutton.html();
    postbutton.prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> Updating...');

    $.ajax({
        url: route,
        type: method,
        complete: function () {
            postbutton.find('i').remove();
            postbutton.prop('disabled', false).html(originalText);
        },
        success: function (response) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: response.message,
            });
            setTimeout(function () {
                Swal.close();
            }, 3000);
        },
        error: function (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.responseJSON.message,
            });
            setTimeout(function () {
                Swal.close();
            }, 3000);
        }
    });
}

function replaceValue(inputElement, maxValue) {
    var inputValue = inputElement.value;
    if (inputValue > maxValue) {
        inputElement.value = '';
    }
}

function toggleTravelAgent(bookingSource) {
    var travelTh = document.getElementById("trvelth");
    var travelTd = document.getElementById("trveltd");

    if (bookingSource === "Travel Agent") {
        travelTh.style.display = "table-cell";
        travelTd.style.display = "table-cell";
    } else {
        travelTh.style.display = "none";
        travelTd.style.display = "none";
    }
}

document.querySelectorAll('input[name="roomcategorycheckbox"]').forEach(checkbox => {
    checkbox.addEventListener('change', fetchCategory);
});

// async function fetchCategory() {
//     let checkboxes = document.getElementsByName('roomcategorycheckbox');

//     for (let i = 0; i < checkboxes.length; i++) {
//         if (checkboxes[i].checked) {
//             const response = await fetch('/roomcategoryget', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json',
//                     'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
//                 },
//                 body: JSON.stringify({
//                     categoryCode: [checkboxes[i].value],
//                 }),
//             });

//             const categories = await response.json();
//             console.log(categories);

//             let table = document.getElementById('dateTable');

//             for (let category of categories) {
//                 let row = table.insertRow();
//                 let cell = row.insertCell();
//                 cell.textContent = category.name;
//                 cell.classList.add('rstatuscatname');

//                 fetchroomcount(category.cat_code)
//                     .then((result) => {
//                         rcount = result;

//                         for (let i = 1; i <= 30; i++) {
//                             let cell = row.insertCell();
//                             cell.classList.add('categoryheader');
//                             cell.innerHTML = `% </br> <span>${rcount}</span>`;
//                         }
//                     })

//                 for (let room of await fetchRooms(category.cat_code)) {
//                     row = table.insertRow();
//                     cell = row.insertCell();
//                     cell.textContent = room.rcode;

//                     for (let i = 1; i <= 30; i++) {
//                         cell = row.insertCell();
//                         cell.classList.add('roomstatuscell');
//                         cell.innerHTML = '&nbsp;';
//                         cell.datarow = room.rcode;

//                         cell.addEventListener('click', function () {
//                             cellindex = this.cellIndex;
//                             if (cellindex) {
//                                 const querySelector = document.querySelectorAll('.dateheadertd')[cellindex - 1];
//                                 const nextcellqueryselector = document.querySelectorAll('.dateheadertd')[cellindex];
//                                 const htmlContent = querySelector.innerHTML;
//                                 const htmlcontent2 = nextcellqueryselector.innerHTML;
//                                 const year = htmlContent.match(/(\d{4})/)[1];
//                                 const nextcellyear = htmlcontent2.match(/(\d{4})/)[1];
//                                 const date = htmlContent.match(/<strong>(\d+)<\/strong>/)[1];
//                                 const nextcelldate = htmlcontent2.match(/<strong>(\d+)<\/strong>/)[1];
//                                 const monthName = htmlContent.match(/<span>([a-zA-Z]+)<\/span>/)[1];
//                                 const nextcellmonthName = htmlcontent2.match(/<span>([a-zA-Z]+)<\/span>/)[1];
//                                 const day = htmlContent.match(/<span>([a-zA-Z]+)<\/span>/g)[1];
//                                 const monthNumber = new Date(Date.parse(monthName + " 1, " + year)).getMonth() + 1;
//                                 const nextmonthNumber = new Date(Date.parse(nextcellmonthName + " 1, " + nextcellyear)).getMonth() + 1;

//                                 if (activePopup) {
//                                     document.body.removeChild(activePopup);
//                                 }
//                                 let popup = createPopup(year, monthNumber, date, day, this.datarow, nextcelldate, nextmonthNumber, nextcellyear);
//                                 let rect = cell.getBoundingClientRect();
//                                 popup.style.top = `${window.scrollY + rect.top - popup.offsetHeight}px`;
//                                 popup.style.left = `revert-layer`;
//                                 document.body.appendChild(popup);
//                                 activePopup = popup;
//                             }
//                         });

//                     }
//                 }
//             }
//         }
//     }
// }

function showLoader() {
    $(".loader-overlay").fadeIn();
}

// Hide the loader
function hideLoader() {
    $(".loader-overlay").fadeOut();
}

var a = ['', 'one ', 'two ', 'three ', 'four ', 'five ', 'six ', 'seven ', 'eight ', 'nine ', 'ten ', 'eleven ', 'twelve ', 'thirteen ', 'fourteen ', 'fifteen ', 'sixteen ', 'seventeen ', 'eighteen ', 'nineteen '];
var b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

function inWords(num) {
    if ((num = num.toString()).length > 9) return 'overflow';
    n = ('000000000' + num).substr(-9).match(/^(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
    if (!n) return; var str = '';
    str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'crore ' : '';
    str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'lakh ' : '';
    str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'thousand ' : '';
    str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'hundred ' : '';
    str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only ' : '';
    return str;
}

function openBillNoPrompt() {
    var billno = prompt("Please Enter The Bill No.");
    if (billno !== null && /^\d+$/.test(billno.trim())) {
        document.getElementById("billNoInput").value = billno.trim();
        document.getElementById("billForm").submit();
    } else {
        return false;
    }
}


function openBillresettle() {
    var billno = prompt("Please Enter The Bill No.");
    if (billno !== null && /^\d+$/.test(billno.trim())) {
        document.getElementById("billnosettle").value = billno.trim();
        document.getElementById("billresettleform").submit();
    } else {
        return false;
    }
}

let sundval = document.querySelectorAll(".sundval");

function handlesundval(event) {
    const input = event.target;
    clearTimeout(input.timer);
    input.timer = setTimeout(function () {
        let value = input.value;
        if (isNaN(value)) {
            value = "100.000";
        } else if (parseFloat(value) > 99999) {
            value = "100000.000";
        } else if (value !== "" && !/\.\d{2}$/.test(value)) {
            value = parseFloat(value).toFixed(3);
        }
        input.value = value;
    }, 1000);
}

setTimeout(() => {

}, timeout);
function getCurrentTimeIndia() {
    var options = {
        timeZone: 'Asia/Kolkata',
        hour12: true,
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
    };

    return new Date().toLocaleString('en-US', options);
}

function dmy(dateString) {
    var parts = dateString.split('-');
    var newDate = parts[2] + '-' + parts[1] + '-' + parts[0];
    return newDate;
}

function ymd(dateString) {
    var parts = dateString.split('-');
    if (parts.length === 3) {
        var newDate = parts[2] + '-' + parts[1] + '-' + parts[0];
        return newDate;
    } else {
        throw new Error("Invalid date format. Expected yyyy-mm-dd.");
    }
}

function curtimes() {
    let cur = new Date();
    let hours = cur.getHours().toString().padStart(2, '0');
    let minutes = cur.getMinutes().toString().padStart(2, '0');
    let seconds = cur.getSeconds().toString().padStart(2, '0');
    let full = `${hours}:${minutes}:${seconds}`;
    return full;
}


function title(str) {
    return str.toLowerCase().split(' ').map(function (word) {
        return word.charAt(0).toUpperCase() + word.slice(1);
    }).join(' ');
}

function pushNotify(stat, ttl, txt, effect, speed, customClass, customIcon, showIcon, showCloseButton, autoclose, autotimeout, gap, distance, type, position) {
    new Notify({
        status: stat == '' ? 'success' : stat,
        title: ttl == '' ? 'Notify title' : ttl,
        text: txt == '' ? '' : txt,
        effect: effect == '' ? 'fade' : effect,
        speed: speed == '' ? 300 : speed,
        customClass: customClass == '' ? null : customClass,
        customIcon: customIcon == '' ? null : customIcon,
        showIcon: showIcon == '' ? true : showIcon,
        showCloseButton: showCloseButton == '' ? true : showCloseButton,
        autoclose: autoclose == '' ? true : autoclose,
        autotimeout: autotimeout == '' ? 5000 : autotimeout,
        gap: gap == '' ? 20 : gap,
        distance: distance == '' ? 20 : distance,
        type: type == '' ? 'outline' : type,
        position: position == '' ? 'right top' : position
    })
}

function initAutoSuggest(inputId, suggestionsId, data) {
    const $input = $(`#${inputId}`);
    const $suggestionList = $(`#${suggestionsId}`);
    let currentFocus = -1;
    let timeoutId;

    $input.on('input focus', function () {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            const input = $(this).val().toLowerCase();
            const suggestions = data.filter(item => item.toLowerCase().includes(input));
            displaySuggestions(suggestions);
            currentFocus = -1;
        }, 200);
    });

    $input.on('keydown', function (e) {
        const $suggestions = $suggestionList.find('.suggestion-item');
        switch (e.keyCode) {
            case 40: // Down arrow
                e.preventDefault();
                currentFocus = (currentFocus + 1) % $suggestions.length;
                updateActive($suggestions);
                break;
            case 38: // Up arrow
                e.preventDefault();
                currentFocus = (currentFocus - 1 + $suggestions.length) % $suggestions.length;
                updateActive($suggestions);
                break;
            case 13: // Enter
                e.preventDefault();
                if (currentFocus > -1) {
                    $suggestions.eq(currentFocus).click();
                }
                break;
        }
    });

    function updateActive($suggestions) {
        $suggestions.removeClass('active-suggestion')
            .eq(currentFocus)
            .addClass('active-suggestion');
        scrollIfNeeded($suggestions.eq(currentFocus), $suggestionList);
    }

    function scrollIfNeeded($element, $container) {
        const containerTop = $container.scrollTop();
        const containerBottom = containerTop + $container.height();
        const elementTop = $element.position().top;
        const elementBottom = elementTop + $element.outerHeight();

        if (elementTop < containerTop) {
            $container.scrollTop(elementTop);
        } else if (elementBottom > containerBottom) {
            $container.scrollTop(elementBottom - $container.height());
        }
    }

    function displaySuggestions(suggestions) {
        $suggestionList.empty().removeClass('show');
        if (suggestions.length > 0 && $input.val() !== '') {
            const fragment = document.createDocumentFragment();
            suggestions.forEach(item => {
                const li = document.createElement('li');
                li.className = 'suggestion-item';
                li.textContent = item;
                fragment.appendChild(li);
            });
            $suggestionList.append(fragment);
            setTimeout(() => $suggestionList.addClass('show'), 0);
        }
    }

    $suggestionList.on('click', '.suggestion-item', function () {
        $input.val($(this).text());
        $suggestionList.removeClass('show');
        setTimeout(() => $suggestionList.empty(), 300);
        $input.trigger('input');
    });

    $(document).on('click', function (e) {
        if (!$(e.target).closest(`#${inputId}, #${suggestionsId}`).length) {
            $suggestionList.removeClass('show');
            setTimeout(() => $suggestionList.empty(), 300);
        }
    });
}

function curtimesec() {
    let curdate = new Date();
    let hour = curdate.getHours();
    let minute = curdate.getMinutes();
    let second = curdate.getSeconds();
    let curtime = `${hour}:${minute}:${second}`;
    return curtime;
}

function dynamicSearch(inputClass, dataAttribute, listClass) {
    const noResultsId = 'no-results-found';
    $(document).on('input', inputClass, function () {
        let searchValue = $(this).val().toLowerCase();
        let hasVisibleItems = false;
        $(`#${noResultsId}`).remove();

        // Search through list items
        $(listClass).each(function () {
            let itemValue = $(this).data(dataAttribute).toLowerCase();
            if (itemValue.includes(searchValue)) {
                $(this).show();
                hasVisibleItems = true;
            } else {
                $(this).hide();
            }
        });

        // Show "no results" message if no matches found
        if (!hasVisibleItems && searchValue.length > 0) {
            const noResultsMessage = $('<li>', {
                id: noResultsId,
                text: 'No matching data found',
                class: 'no-results'
            });

            $(listClass).first().parent('ul').append(noResultsMessage);
        }
    });
}

function toggleList(buttonId, listId) {
    $(buttonId).on('click', function () {
        $(listId).slideToggle();
        $(listId).find('i').toggleClass('fa-angle-down fa-angle-up');
    });
}

function checkAllCheckboxes(checkAllId, checkboxClass) {
    $(checkAllId).on('click', function () {
        $(checkboxClass).prop('checked', this.checked);
    });
}


function validateDateRange(fromDate, toDate, startDt, endDt) {
    try {
        // Convert strings to Date objects
        const fromDateTime = new Date(fromDate);
        const toDateTime = new Date(toDate);
        const currentDateTime = new Date();
        const startDateTime = new Date(startDt);
        const endDateTime = new Date(endDt);

        // Object to store validation result
        const result = {
            isValid: true,
            message: '',
            resetRequired: false
        };

        // Check if dates are empty
        if (!fromDate || !toDate) {
            return {
                isValid: false,
                message: 'Please select both From Date and To Date',
                resetRequired: true
            };
        }

        // Check if dates are valid
        if (isNaN(fromDateTime.getTime()) || isNaN(toDateTime.getTime())) {
            return {
                isValid: false,
                message: 'Please enter valid dates',
                resetRequired: true
            };
        }

        // Check if from date is greater than to date
        if (fromDateTime > toDateTime) {
            return {
                isValid: false,
                message: 'From Date should not be greater than To Date',
                resetRequired: true
            };
        }

        // Check if dates are in the future
        if (fromDateTime > currentDateTime || toDateTime > currentDateTime) {
            return {
                isValid: false,
                message: 'Dates cannot be in the future',
                resetRequired: true
            };
        }

        // Check if dates are within allowed range (e.g., not before start_dt)
        if (fromDateTime < startDateTime || toDateTime > endDateTime) {
            return {
                isValid: false,
                message: 'Dates must be within the allowed range',
                resetRequired: true
            };
        }

        // Check if date range is more than 1 year
        const oneYearFromFrom = new Date(fromDateTime);
        oneYearFromFrom.setFullYear(oneYearFromFrom.getFullYear() + 1);
        if (toDateTime > oneYearFromFrom) {
            return {
                isValid: false,
                message: 'Date range cannot exceed 1 year',
                resetRequired: true
            };
        }

        // Check minimum days (e.g., 7 days)
        const minDays = 0;
        const daysDifference = Math.floor((toDateTime - fromDateTime) / (1000 * 60 * 60 * 24));
        if (daysDifference < minDays) {
            return {
                isValid: false,
                message: `Date range should be at least ${minDays} days`,
                resetRequired: true
            };
        }

        return result;

    } catch (error) {
        return {
            isValid: false,
            message: 'Error validating dates',
            resetRequired: true
        };
    }
}

function validateFinancialYear(dateInputSelector) {
    let dateInput = $(dateInputSelector);
    let selectedDate = new Date(dateInput.val());
    var backdateValue = $('meta[name="backdate"]').attr('content');
    fetch(`${yearManageUrl}?backdate=${backdateValue}`)
        .then(response => response.json())
        .then(data => {
            let finYearStart = new Date(data.finyearreal.start);
            let finYearEnd = new Date(data.finyearreal.end);

            if (backdateValue === '0') {
                if (selectedDate > finYearEnd || selectedDate < finYearStart) {
                    dateInput.val(data.mtd.start);
                    pushNotify('info', 'Alert', 'Date must be within allowed range', 'fade', 300, '', '', true, true, true, 2000, 20, 20, 'outline', 'right top');
                }
            }
        })
        .catch(error => console.error("Error fetching financial year data:", error));
}


// Helper function to check weekends
function isWeekend(date) {
    const day = date.getDay();
    return day === 0 || day === 6; // 0 is Sunday, 6 is Saturday
}

function formsubmit(formid, buttonid, formname, redirect, route) {
    $(buttonid).html('<i class="fas fa-spinner fa-spin"></i> Submitting').prop('disabled', true);

    $.ajax({
        url: route,
        type: "POST",
        data: $(formid).serialize(),
        success: function (response) {
            if (response.status == 'success') {
                Swal.fire({
                    title: "Success",
                    text: response.message,
                    icon: "success"
                });
                $(buttonid).html('<i class="fas fa-check-circle"></i> Submitted').prop('disabled', true);

                setTimeout(() => {
                    window.location.href = response.redirecturl;
                }, 1000);
            } else if (response.status == 'error') {
                Swal.fire({
                    title: "Validation",
                    text: response.message,
                    icon: "error"
                });
                $(buttonid).html('<i class="fa-regular fa-circle-xmark"></i> Not Submitted').prop('disabled', false);
            } else {
                pushNotify('success', formname, response.message, 'fade', 300, '', '', true, true, true, 500000, 20, 20, 'outline', 'right top');
                $(buttonid).html('<i class="fas fa-check-circle"></i> Submit').prop('disabled', false);
            }
        },
        error: function (xhr) {
            let errorMessage = 'An error occurred while submitting.';
            if (xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage = xhr.responseJSON.message;
            }
            pushNotify('error', formname, errorMessage, 'fade', 300, '', '', true, true, true, 500000, 20, 20, 'outline', 'right top');
            $(buttonid).html('<i class="fas fa-check-circle"></i> Submit').prop('disabled', false);
            pushNotify('error', formname, errorMessage, 'fade', 300, '', '', true, true, true, 50000, 20, 20, 'outline', 'right top');
        },
        // complete: function () {
        //     $(buttonid).html('<i class="fas fa-check-circle"></i> Submitted').prop('disabled', true);
        // }
    });
}